Tarmil's Emacs configuration

* Display
Toolbar, menu bar, startup screen... all this stuff is useless to me. Remove
them first to minimize flickering on startup.

#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
(menu-bar-mode 0)
(column-number-mode 1)
(setq inhibit-startup-message t)
(setq inhibit-startup-screen t)
(setq initial-scratch-message nil)
#+END_SRC

While we're at it, some modeline customizations.

#+BEGIN_SRC emacs-lisp
  (setq
   display-time-day-and-date t
   display-time-mode t)
#+END_SRC

* Initialize package.el using package+
package+ installs all the packages that are listed in the package-manifest, and
uninstalls all those that aren't.

#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (setf package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("melpa" . "http://melpa.org/packages/")))
  (unless (package-installed-p 'package+)
    (package-refresh-contents)
    (package-install 'package+))
  ;; The list of packages. Install missing packages, uninstall extra ones.
  (package-manifest
   'ahg
   'async
   'auctex
   'color-theme-sanityinc-tomorrow
   'ergoemacs-mode
   'font-utils
   'fsharp-mode
   'haskell-mode
   'helm
   'highlight-symbol
   'idris-mode
   'list-utils
   'magit
   'markdown-mode
   'package+
   'pcache
   'persistent-soft
   'rainbow-delimiters
   'restclient
   'spaceline
   'ucs-utils
   'unicode-fonts)
#+END_SRC

* Color theme
#+BEGIN_SRC emacs-lisp
  ;;; Color theme.
  (setq custom-safe-themes '("06f0b439b62164c6f8f84fdda32b62fb50b6d00e8b01c2208e55543a6337433a" default))
  (load-theme 'sanityinc-tomorrow-night)
  (require 'spaceline-config)
  (spaceline-emacs-theme)
#+END_SRC

* ErgoEmacs
Complete remapping of the keyboard shortcuts that uses Meta much more than Ctrl.

#+BEGIN_SRC emacs-lisp
  (require 'ergoemacs-mode)
  (setq ergoemacs-keyboard-layout "dv")   ; Dvorak
  (ergoemacs-mode)
  (global-set-key (kbd "M-v") 'ergoemacs-beginning-or-end-of-buffer)
  (global-set-key (kbd "M-w") 'switch-to-buffer)
  (global-set-key (kbd "M-m") 'back-to-indentation)
  (global-set-key (kbd "M-3") 'delete-other-windows)
  (global-set-key (kbd "M-0") 'delete-window)
  (global-set-key (kbd "S-<tab>") 'tab-to-tab-stop)
  (global-set-key (kbd "<backtab>") 'tab-to-tab-stop)
  (global-set-key (kbd "C-M-S-b") 'compile)
  (global-set-key (kbd "C-B") 'recompile)
  (global-set-key (kbd "S-<space>") 'self-insert-command)
  ;; Symbol's function definition is void: ergoemacs-org-mode-paste
  (fset 'ergoemacs-org-mode-paste 'ergoemacs-paste)
  ;; For some reason, org-mode fracks up tab completion in minibuffer.
  (define-key minibuffer-local-map [tab] 'minibuffer-complete)
#+END_SRC

* Helm

#+BEGIN_SRC emacs-lisp
  (require 'helm)
  
  ;; must set before helm-config,  otherwise helm use default
  ;; prefix "C-x c", which is inconvenient because you can
  ;; accidentially pressed "C-x C-c"
  (setq helm-command-prefix-key "C-c h")
  
  (require 'helm-config)
  
  (helm-mode 1)
  (setq
   helm-quick-update t ; do not display invisible candidates
   )
#+END_SRC

* Window management
Use [pause] to fix a buffer in a window, and don't create new windows for newly
created buffers.

#+BEGIN_SRC emacs-lisp
  (defadvice pop-to-buffer (before cancel-other-window first)
    (ad-set-arg 1 nil))
  (ad-activate 'pop-to-buffer)
  ;; Toggle window dedication
  (defun toggle-window-dedicated ()
    "Toggle whether the current active window is dedicated or not"
    (interactive)
    (message
     (if (let (window (get-buffer-window (current-buffer)))
           (set-window-dedicated-p window 
                                   (not (window-dedicated-p window))))
         "Window '%s' is dedicated"
       "Window '%s' is normal")
     (current-buffer)))
  ;; Press [pause] key in each window you want to "freeze"
  (global-set-key [pause] 'toggle-window-dedicated)
  (setq pop-up-windows nil)
#+END_SRC

* Language modes
** Config files

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist
               '("\\.?hgrc\\'" . conf-mode))
#+END_SRC

** F#

#+BEGIN_SRC emacs-lisp
  ;; (setq fsharp-ac-executable "tail")   ; dirty way to deactivate autocomplete in F#
  (setq fsharp-indent-offset 4)
  (setq inferior-fsharp-program
        (case system-type
          ("windows-nt" "\"c:/Program Files (x86)/Microsoft SDKs/F#/3.1/Framework/v4.0/fsi.exe\"")
          (t "fsharpi")))
  (defun fsharp-set-keybindings ()
    (define-key fsharp-mode-map (kbd "M-<return>") 'fsharp-eval-region)
    (define-key fsharp-mode-map (kbd "C-M-x") 'fsharp-eval-phrase)
    (define-key fsharp-mode-map (kbd "C-<tab>") 'fsharp-ac/complete-at-point))
  (add-hook 'fsharp-mode-hook 'fsharp-set-keybindings)
#+END_SRC

** Haskell

#+BEGIN_SRC emacs-lisp
  (setq haskell-program-name "ghci")
  (defun my-haskell-init ()
    (turn-on-haskell-indent)
    (define-key haskell-mode-map (kbd "C-c C-r") 'inferior-haskell-reload-file))
  (add-hook 'haskell-mode-hook 'my-haskell-init)

#+END_SRC

** AUCTeX (LaTeX)
#+BEGIN_SRC emacs-lisp
  ;;; AUCTeX (LaTeX mode)
  (defun my-latex-hook ()
    (define-key LaTeX-mode-map (kbd "M-<return>") 'LaTeX-insert-item))
  (add-hook 'LaTeX-mode-hook 'my-latex-hook)
#+END_SRC

* Misc options
** no electric indent in F#
It tries to indent the current line too, which messes up in F#.

#+BEGIN_SRC emacs-lisp
  (defun no-electric-indent ()
    (electric-indent-local-mode 0))
  (add-hook 'fsharp-mode-hook 'no-electric-indent)
#+END_SRC

** y-or-n-p
I don't want to type "yes<return>" when "y" would suffice.

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Single-space sentence separator
I don't want any of that stupid "two spaces to end a sentence".

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

** Bell
No pesky bell.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Backup files
Put them in ~/.saves.

#+BEGIN_SRC emacs-lisp
  (setq
   backup-by-copying t
   backup-directory-alist '(("." . "~/.saves"))
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2)
#+END_SRC

** Parentheses
Automatically close parens when opening them.
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
#+END_SRC

Highlight the paren matching the one at point.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

Rainbow-delimiters to make it easier to see nested parens.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

** Spacing
Tabs are 4 characters.

#+BEGIN_SRC emacs-lisp
  (setq
   tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64
                   68 72 76 80 84 88 92 96 100 104 108 112 116 120))
#+END_SRC

Paragraph width is 80 characters.

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 79)
#+END_SRC

** Highlight-symbol

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-s") 'highlight-symbol-at-point)
  (global-set-key (kbd "M-S") 'highlight-symbol-remove-all)
  (add-hook 'prog-mode-hook 'highlight-symbol-mode) ; automatically highlight symbol at point
  (setq highlight-symbol-idle-delay 0)
#+END_SRC

** Compilation window

#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output 'first-error)
#+END_SRC

** Magit options

#+BEGIN_SRC emacs-lisp
  (setq magit-last-seen-setup-instructions "1.4.0")
#+END_SRC
